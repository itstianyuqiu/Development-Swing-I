package ictgradschool.industry.lab11.examples.example6;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * A simple panel which demonstrates how we can handle ActionEvents generated by button clicks.
 */
public class ExampleSix extends JPanel implements ActionListener {

    private JButton button;
    private int ovalX, ovalY, ovalWidth, ovalHeight;
    private Timer timer;

    /**
     * Creates a new ExampleFive panel, which has a button.
     */
    public ExampleSix() {

        setPreferredSize(new Dimension(500, 500));

        this.button = new JButton("Start!");
        this.add(button);
        button.addActionListener(this);

        // Set up a timer which will call this panel's actionPerformed() method every 200 milliseconds.
        this.timer = new Timer(200, this);

        randomOval();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // If the action event came from the button, then start or stop the timer.
        if (e.getSource() == button) {
            if (timer.isRunning()) {
                timer.stop();
                button.setText("Start!");
            } else {
                timer.start();
                button.setText("Stop!");
            }
        }

        // Otherwise, if it came from the timer, then "animate".
        else if (e.getSource() == timer) {
            randomOval();
        }
    }

    /**
     * Randomizes the size of the oval that's drawn on this Panel, then calls repaint() to tell Swing it should redraw
     * this panel.
     */
    private void randomOval() {

        ovalWidth = (int)(Math.random() * 200) + 100;
        ovalHeight = (int)(Math.random() * 200) + 100;
        ovalX = (int) (Math.random() * (getWidth() - ovalWidth));
        ovalY = (int) (Math.random() * (getHeight() - ovalHeight));

        repaint();
    }

    /**
     * In addition to any child components (e.g. the JButton), this panel also draws an oval of a certain size when
     * it renders itself.
     *
     * @param g the {@link Graphics} object to use to draw the oval
     */
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);

        g.drawOval(ovalX, ovalY, ovalWidth, ovalHeight);
    }

    /**
     * Program entry point. Creates a new JFrame and adds an instance of this ExampleThree panel as its content.
     * @param args
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFrame myFrame = new JFrame();
                myFrame.setTitle("Example Five: Use of repaint()");
                myFrame.setLocation(100, 100);
                myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                ExampleSix ex3 = new ExampleSix();
                myFrame.getContentPane().add(ex3);
                myFrame.pack();
                myFrame.setVisible(true);

            }
        });
    }
}
